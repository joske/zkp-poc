use num_bigint::{BigUint, RandBigInt};

// P & Q from https://tools.ietf.org/html/rfc3526#section-3
pub const P: &[u8] = &[
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC9, 0x0F, 0xDA, 0xA2, 0x21, 0x68, 0xC2, 0x34,
    0xC4, 0xC6, 0x62, 0x8B, 0x80, 0xDC, 0x1C, 0xD1, 0x29, 0x02, 0x4E, 0x08, 0x8A, 0x67, 0xCC, 0x74,
    0x02, 0x0B, 0xBE, 0xA6, 0x3B, 0x13, 0x9B, 0x22, 0x51, 0x4A, 0x08, 0x79, 0x8E, 0x34, 0x04, 0xDD,
    0xEF, 0x95, 0x19, 0xB3, 0xCD, 0x3A, 0x43, 0x1B, 0x30, 0x2B, 0x0A, 0x6D, 0xF2, 0x5F, 0x14, 0x37,
    0x4F, 0xE1, 0x35, 0x6D, 0x6D, 0x51, 0xC2, 0x45, 0xE4, 0x85, 0xB5, 0x76, 0x62, 0x5E, 0x7E, 0xC6,
    0xF4, 0x4C, 0x42, 0xE9, 0xA6, 0x37, 0xED, 0x6B, 0x0B, 0xFF, 0x5C, 0xB6, 0xF4, 0x06, 0xB7, 0xED,
    0xEE, 0x38, 0x6B, 0xFB, 0x5A, 0x89, 0x9F, 0xA5, 0xAE, 0x9F, 0x24, 0x11, 0x7C, 0x4B, 0x1F, 0xE6,
    0x49, 0x28, 0x66, 0x51, 0xEC, 0xE4, 0x5B, 0x3D, 0xC2, 0x00, 0x7C, 0xB8, 0xA1, 0x63, 0xBF, 0x05,
    0x98, 0xDA, 0x48, 0x36, 0x1C, 0x55, 0xD3, 0x9A, 0x69, 0x16, 0x3F, 0xA8, 0xFD, 0x24, 0xCF, 0x5F,
    0x83, 0x65, 0x5D, 0x23, 0xDC, 0xA3, 0xAD, 0x96, 0x1C, 0x62, 0xF3, 0x56, 0x20, 0x85, 0x52, 0xBB,
    0x9E, 0xD5, 0x29, 0x07, 0x70, 0x96, 0x96, 0x6D, 0x67, 0x0C, 0x35, 0x4E, 0x4A, 0xBC, 0x98, 0x04,
    0xF1, 0x74, 0x6C, 0x08, 0xCA, 0x23, 0x73, 0x27, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
];
pub const Q: &[u8] = &[
    0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE4, 0x87, 0xED, 0x51, 0x10, 0xB4, 0x61, 0x1A,
    0x62, 0x63, 0x31, 0x45, 0xC0, 0x6E, 0x0E, 0x68, 0x94, 0x81, 0x27, 0x04, 0x45, 0x33, 0xE6, 0x3A,
    0x01, 0x05, 0xDF, 0x53, 0x1D, 0x89, 0xCD, 0x91, 0x28, 0xA5, 0x04, 0x3C, 0xC7, 0x1A, 0x02, 0x6E,
    0xF7, 0xCA, 0x8C, 0xD9, 0xE6, 0x9D, 0x21, 0x8D, 0x98, 0x15, 0x85, 0x36, 0xF9, 0x2F, 0x8A, 0x1B,
    0xA7, 0xF0, 0x9A, 0xB6, 0xB6, 0xA8, 0xE1, 0x22, 0xF2, 0x42, 0xDA, 0xBB, 0x31, 0x2F, 0x3F, 0x63,
    0x7A, 0x26, 0x21, 0x74, 0xD3, 0x1B, 0xF6, 0xB5, 0x85, 0xFF, 0xAE, 0x5B, 0x7A, 0x03, 0x5B, 0xF6,
    0xF7, 0x1C, 0x35, 0xFD, 0xAD, 0x44, 0xCF, 0xD2, 0xD7, 0x4F, 0x92, 0x08, 0xBE, 0x25, 0x8F, 0xF3,
    0x24, 0x94, 0x33, 0x28, 0xF6, 0x72, 0x2D, 0x9E, 0xE1, 0x00, 0x3E, 0x5C, 0x50, 0xB1, 0xDF, 0x82,
    0xCC, 0x6D, 0x24, 0x1B, 0x0E, 0x2A, 0xE9, 0xCD, 0x34, 0x8B, 0x1F, 0xD4, 0x7E, 0x92, 0x67, 0xAF,
    0xC1, 0xB2, 0xAE, 0x91, 0xEE, 0x51, 0xD6, 0xCB, 0x0E, 0x31, 0x79, 0xAB, 0x10, 0x42, 0xA9, 0x5D,
    0xCF, 0x6A, 0x94, 0x83, 0xB8, 0x4B, 0x4B, 0x36, 0xB3, 0x86, 0x1A, 0xA7, 0x25, 0x5E, 0x4C, 0x02,
    0x78, 0xBA, 0x36, 0x04, 0x65, 0x11, 0xB9, 0x93, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
];
pub const G: &[u8] = &[2];
pub const H: &[u8] = &[4];

pub fn decode(bytes: &[u8]) -> BigUint {
    BigUint::from_bytes_be(bytes)
}

pub fn encode(n: &BigUint) -> Vec<u8> {
    n.to_bytes_be()
}

pub fn random_number() -> BigUint {
    rand::thread_rng().gen_biguint(64)
}

pub fn modpow(x: &BigUint, exp: &BigUint, p: &BigUint) -> BigUint {
    x.modpow(exp, p)
}

pub fn calculate_response(x: &BigUint, k: &BigUint, c: &BigUint, q: &BigUint) -> BigUint {
    if k >= &(c * x) {
        k - ((c * x) % q)
    } else {
        q - ((c * x - k) % q)
    }
}

// we can avoid passing g, h, p, but then we need to re-parse the BigUints
#[allow(clippy::too_many_arguments)]
pub fn verify(
    s: &BigUint,
    r1: &BigUint,
    r2: &BigUint,
    c: &BigUint,
    y1: &BigUint,
    y2: &BigUint,
    g: &BigUint,
    h: &BigUint,
    p: &BigUint,
) -> bool {
    &(modpow(g, s, p) * &modpow(y1, c, p)) % p == *r1
        && &(modpow(h, s, p) * &modpow(y2, c, p)) % p == *r2
}

#[cfg(test)]
mod tests {
    use proptest::proptest;

    use super::*;

    #[test]
    fn test_exp() {
        let x = &BigUint::from(2u32);
        let exp = &BigUint::from(2u32);
        let p = &BigUint::from(100u32);
        assert_eq!(modpow(x, exp, p), BigUint::from(4u32));
    }

    #[test]
    fn test_compute_s() {
        assert_eq!(
            calculate_response(
                &BigUint::from(2u32),
                &BigUint::from(100u32),
                &BigUint::from(2u32),
                &BigUint::from(100u32),
            ),
            BigUint::from(96u32),
        );
        assert_eq!(
            calculate_response(
                &BigUint::from(2u32),
                &BigUint::from(10u32),
                &BigUint::from(1u32),
                &BigUint::from(101u32),
            ),
            BigUint::from(8u32),
        );
        assert_eq!(
            calculate_response(
                &BigUint::from(2u32),
                &BigUint::from(10u32),
                &BigUint::from(6u32),
                &BigUint::from(101u32),
            ),
            BigUint::from(99u32),
        );
        assert_eq!(
            calculate_response(
                &BigUint::from(6u32),
                &BigUint::from(7u32),
                &BigUint::from(4u32),
                &BigUint::from(23u32),
            ),
            BigUint::from(6u32),
        );
    }

    #[test]
    fn test_verify() {
        let p = &decode(P);
        let q = &decode(Q);
        let g = &decode(G);
        let h = &decode(H);

        let c = &BigUint::from(4u32);
        let x = &BigUint::from(6u32);
        let k = &BigUint::from(7u32);
        let y1 = modpow(g, x, p);
        // assert_eq!(y1, BigUint::from(2u32));
        let y2 = modpow(h, x, p);
        // assert_eq!(y2, BigUint::from(3u32));
        let r1 = modpow(g, k, p);
        // assert_eq!(r1, BigUint::from(8u32));
        let r2 = modpow(h, k, p);
        // assert_eq!(r2, BigUint::from(4u32));
        let s = calculate_response(x, k, c, q);
        assert!(verify(&s, &r1, &r2, c, &y1, &y2, g, h, p));
    }

    proptest! {
        // should work with any value for x, c and k
        #[test]
        fn test_full(x in 1..10000u64, k in 1..10000u64, c in 1..10000u64) {
            let p = &decode(P);
            let g = &decode(G);
            let h = &decode(H);
            let q = &decode(Q);

            let x = &BigUint::from(x);
            let k = &BigUint::from(k);
            let c = &BigUint::from(c);

            let y1 = modpow(g, x, p);
            let y2 = modpow(h, x, p);
            let r1 = modpow(g, k, p);
            let r2 = modpow(h, k, p);
            let s = calculate_response(x, k, c, q);
            assert!(verify(&s, &r1, &r2, &c, &y1, &y2, g, h, p));
        }
    }
}
